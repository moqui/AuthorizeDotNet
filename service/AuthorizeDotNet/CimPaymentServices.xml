<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <!-- These services are based on the Authorize.Net CIM API, version 1. See: http://developer.authorize.net/api/cim/ -->

    <service verb="authorize" noun="Payment">
        <implements service="mantle.account.PaymentServices.authorize#Payment"/>
        <actions>
            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            <if condition="payment == null"><return message="Payment ${paymentId} not found"/></if>
            <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            <if condition="paymentMethod?.paymentMethodTypeEnumId != 'PmtCreditCard'">
                <return error="true" message="Cannot authorize payment ${paymentId}, not a Credit Card payment."/></if>

            <!-- get creditCard for cardSecurityCode before CIM check as that will remove it -->
            <if condition="!cardSecurityCode">
                <set field="creditCard" from="payment.'mantle.account.method.CreditCard'"/>
                <set field="cardSecurityCode" from="creditCard?.cardSecurityCode"/>
            </if>

            <set field="visit" from="payment.'moqui.server.Visit'"/>

            <!-- if no gatewayCimId, store the PaymentMethod on CIM -->
            <if condition="!paymentMethod.gatewayCimId">
                <service-call name="AuthorizeDotNet.CimServices.store#CustomerPaymentMethod"
                        in-map="[paymentMethodId:paymentMethod.paymentMethodId, paymentId:paymentId, paymentGatewayConfigId:paymentGatewayConfigId]"/>
                <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            </if>
            <!-- get party after CIM check so that gatewayCimId will be populated -->
            <set field="party" from="paymentMethod.'Owner#mantle.party.Party'"/>
            <if condition="!party.gatewayCimId">
                <return type="danger" message="Party ${party.partyId} has no gateway CIM ID, not authorizing payment"/></if>
            <if condition="!paymentMethod.gatewayCimId">
                <return type="danger" message="Payment Method ${paymentMethod.paymentMethodId} has no gateway CIM ID, not authorizing payment"/></if>

            <entity-find-one entity-name="AuthorizeDotNet.PaymentGatewayAuthorizeNet" value-field="pgan"/>
            <if condition="pgan == null"><log level="error" message="No PaymentGatewayAuthorizeNet found with ID ${paymentGatewayConfigId}"/><return/></if>

            <script><![CDATA[requestString = """<?xml version="1.0" encoding="utf-8"?>
<createCustomerProfileTransactionRequest xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd">
    <merchantAuthentication><name>${pgan.login}</name><transactionKey>${pgan.tranKey}</transactionKey></merchantAuthentication>
    <transaction><profileTransAuthOnly>
        <amount>${toPlainString(payment.amount)}</amount>
        <customerProfileId>${party.gatewayCimId}</customerProfileId>
        <customerPaymentProfileId>${paymentMethod.gatewayCimId}</customerPaymentProfileId>
        <order><invoiceNumber>${payment.orderId}</invoiceNumber></order>
        ${cardSecurityCode ? ('<cardCode>' + cardSecurityCode + '</cardCode>') : ''}
    </profileTransAuthOnly></transaction>
    <extraOptions>x_currency_code=${payment.amountUomId}&amp;x_customer_ip=${visit?.clientIpAddress ?: ''}</extraOptions>
</createCustomerProfileTransactionRequest>
            """]]></script>

            <set field="paymentOperationEnumId" value="PgoAuthorize"/>
            <set field="transactionUrl" from="pgan.transactionUrl"/>
            <service-call name="AuthorizeDotNet.CimPaymentServices.send#CimRequest" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="capture" noun="Payment">
        <implements service="mantle.account.PaymentServices.capture#Payment"/>
        <actions>
            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            <if condition="payment == null"><return message="Payment ${paymentId} not found"/></if>
            <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            <if condition="paymentMethod?.paymentMethodTypeEnumId != 'PmtCreditCard'">
                <return error="true" message="Cannot capture payment ${paymentId}, not a Credit Card payment."/></if>

            <!-- if no gatewayCimId, store the PaymentMethod on CIM -->
            <if condition="!paymentMethod.gatewayCimId">
                <service-call name="AuthorizeDotNet.CimServices.store#CustomerPaymentMethod"
                        in-map="[paymentMethodId:paymentMethod.paymentMethodId, paymentId:paymentId]"/>
                <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            </if>
            <!-- get party after CIM check so that gatewayCimId will be populated -->
            <set field="party" from="paymentMethod.'Owner#mantle.party.Party'"/>
            <if condition="!party.gatewayCimId">
                <return type="danger" message="Party ${party.partyId} has no gateway CIM ID, not capturing payment"/></if>
            <if condition="!paymentMethod.gatewayCimId">
                <return type="danger" message="Payment Method ${paymentMethod.paymentMethodId} has no gateway CIM ID, not capturing payment"/></if>

            <entity-find-one entity-name="AuthorizeDotNet.PaymentGatewayAuthorizeNet" value-field="pgan"/>
            <if condition="pgan == null"><log level="error" message="No PaymentGatewayAuthorizeNet found with ID ${paymentGatewayConfigId}"/><return/></if>

            <set field="paymentRefNum" from="payment.paymentRefNum"/>
            <if condition="!paymentRefNum">
                <service-call name="mantle.account.PaymentServices.get#AuthorizePaymentGatewayResponse" in-map="context" out-map="context"/>
                <if condition="paymentGatewayResponse == null"><return error="true" message="Could not find successful authorization for Payment ${paymentId}"/></if>
                <set field="paymentRefNum" from="paymentGatewayResponse.referenceNum"/>
            </if>
            <if condition="!paymentRefNum"><return error="true" message="Could not find authorization transaction ID (reference number) for Payment ${paymentId}"/></if>

            <script><![CDATA[requestString = """<?xml version="1.0" encoding="utf-8"?>
<createCustomerProfileTransactionRequest xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd">
    <merchantAuthentication><name>${pgan.login}</name><transactionKey>${pgan.tranKey}</transactionKey></merchantAuthentication>
    <transaction><profileTransPriorAuthCapture>
        <amount>${toPlainString(amount ?: payment.amount)}</amount>
        <customerProfileId>${party.gatewayCimId}</customerProfileId>
        <customerPaymentProfileId>${paymentMethod.gatewayCimId}</customerPaymentProfileId>
        <transId>${paymentRefNum}</transId>
    </profileTransPriorAuthCapture></transaction>
    <extraOptions>x_currency_code=${payment.amountUomId}</extraOptions>
</createCustomerProfileTransactionRequest>
            """]]></script>

            <set field="paymentOperationEnumId" value="PgoCapture"/>
            <set field="transactionUrl" from="pgan.transactionUrl"/>
            <service-call name="AuthorizeDotNet.CimPaymentServices.send#CimRequest" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="authorizeAndCapture" noun="Payment">
        <description>This service is an alternative to the authorize and capture services, doing both in a single operation.
            If used should generally be configured as the authorize service with no capture service set.</description>
        <implements service="mantle.account.PaymentServices.authorize#Payment"/>
        <actions>
            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            <if condition="payment == null"><return message="Payment ${paymentId} not found"/></if>
            <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            <if condition="paymentMethod?.paymentMethodTypeEnumId != 'PmtCreditCard'">
                <return error="true" message="Cannot authorize and capture payment ${paymentId}, not a Credit Card payment."/></if>

            <!-- get creditCard for cardSecurityCode before CIM check as that will remove it -->
            <if condition="!cardSecurityCode">
                <set field="creditCard" from="payment.'mantle.account.method.CreditCard'"/>
                <set field="cardSecurityCode" from="creditCard?.cardSecurityCode"/>
            </if>

            <set field="visit" from="payment.'moqui.server.Visit'"/>

            <!-- if no gatewayCimId, store the PaymentMethod on CIM -->
            <if condition="!paymentMethod.gatewayCimId">
                <service-call name="AuthorizeDotNet.CimServices.store#CustomerPaymentMethod"
                        in-map="[paymentMethodId:paymentMethod.paymentMethodId, paymentId:paymentId, paymentGatewayConfigId:paymentGatewayConfigId]"/>
                <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            </if>
            <!-- get party after CIM check so that gatewayCimId will be populated -->
            <set field="party" from="paymentMethod.'Owner#mantle.party.Party'"/>
            <if condition="!party.gatewayCimId">
                <return type="danger" message="Party ${party.partyId} has no gateway CIM ID, not authorizing and capturing payment"/></if>
            <if condition="!paymentMethod.gatewayCimId">
                <return type="danger" message="Payment Method ${paymentMethod.paymentMethodId} has no gateway CIM ID, not authorizing and capturing payment"/></if>

            <entity-find-one entity-name="AuthorizeDotNet.PaymentGatewayAuthorizeNet" value-field="pgan"/>
            <if condition="pgan == null"><log level="error" message="No PaymentGatewayAuthorizeNet found with ID ${paymentGatewayConfigId}"/><return/></if>

            <script><![CDATA[requestString = """<?xml version="1.0" encoding="utf-8"?>
<createCustomerProfileTransactionRequest xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd">
    <merchantAuthentication><name>${pgan.login}</name><transactionKey>${pgan.tranKey}</transactionKey></merchantAuthentication>
    <transaction><profileTransAuthCapture>
        <amount>${toPlainString(payment.amount)}</amount>
        <customerProfileId>${party.gatewayCimId}</customerProfileId>
        <customerPaymentProfileId>${paymentMethod.gatewayCimId}</customerPaymentProfileId>
        <order><invoiceNumber>${payment.orderId}</invoiceNumber></order>
        ${cardSecurityCode ? ('<cardCode>' + cardSecurityCode + '</cardCode>') : ''}
    </profileTransAuthCapture></transaction>
    <extraOptions>x_currency_code=${payment.amountUomId}&amp;x_customer_ip=${visit?.clientIpAddress ?: ''}</extraOptions>
</createCustomerProfileTransactionRequest>
            """]]></script>

            <set field="paymentOperationEnumId" value="PgoAuthAndCapture"/>
            <set field="transactionUrl" from="pgan.transactionUrl"/>
            <service-call name="AuthorizeDotNet.CimPaymentServices.send#CimRequest" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="release" noun="Payment">
        <implements service="mantle.account.PaymentServices.release#Payment"/>
        <actions>
            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            <if condition="payment == null"><return message="Payment ${paymentId} not found"/></if>
            <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            <if condition="paymentMethod?.paymentMethodTypeEnumId != 'PmtCreditCard'">
                <return error="true" message="Cannot release authorization for payment ${paymentId}, not a Credit Card payment."/></if>

            <!-- if no gatewayCimId, store the PaymentMethod on CIM -->
            <if condition="!paymentMethod.gatewayCimId">
                <service-call name="AuthorizeDotNet.CimServices.store#CustomerPaymentMethod"
                        in-map="[paymentMethodId:paymentMethod.paymentMethodId, paymentId:paymentId, paymentGatewayConfigId:paymentGatewayConfigId]"/>
                <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            </if>
            <!-- get party after CIM check so that gatewayCimId will be populated -->
            <set field="party" from="paymentMethod.'Owner#mantle.party.Party'"/>
            <if condition="!party.gatewayCimId">
                <return type="danger" message="Party ${party.partyId} has no gateway CIM ID, not releasing payment"/></if>
            <if condition="!paymentMethod.gatewayCimId">
                <return type="danger" message="Payment Method ${paymentMethod.paymentMethodId} has no gateway CIM ID, not releasing payment"/></if>

            <entity-find-one entity-name="AuthorizeDotNet.PaymentGatewayAuthorizeNet" value-field="pgan"/>
            <if condition="pgan == null"><log level="error" message="No PaymentGatewayAuthorizeNet found with ID ${paymentGatewayConfigId}"/><return/></if>

            <set field="paymentRefNum" from="payment.paymentRefNum"/>
            <if condition="!paymentRefNum">
                <service-call name="mantle.account.PaymentServices.get#AuthorizePaymentGatewayResponse" in-map="context" out-map="context"/>
                <if condition="!paymentGatewayResponse"><return error="true" message="Could not find successful authorization for Payment ${paymentId}"/></if>
                <set field="paymentRefNum" from="paymentGatewayResponse.referenceNum"/>
            </if>
            <if condition="!paymentRefNum"><return error="true" message="Could not find authorization transaction ID (reference number) for Payment ${paymentId}"/></if>

            <script><![CDATA[requestString = """<?xml version="1.0" encoding="utf-8"?>
<createCustomerProfileTransactionRequest xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd">
    <merchantAuthentication><name>${pgan.login}</name><transactionKey>${pgan.tranKey}</transactionKey></merchantAuthentication>
    <transaction><profileTransVoid>
        <customerProfileId>${party.gatewayCimId}</customerProfileId>
        <customerPaymentProfileId>${paymentMethod.gatewayCimId}</customerPaymentProfileId>
        <transId>${paymentRefNum}</transId>
    </profileTransVoid></transaction>
</createCustomerProfileTransactionRequest>
            """]]></script>

            <set field="paymentOperationEnumId" value="PgoRelease"/>
            <set field="transactionUrl" from="pgan.transactionUrl"/>
            <service-call name="AuthorizeDotNet.CimPaymentServices.send#CimRequest" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="refund" noun="Payment">
        <implements service="mantle.account.PaymentServices.refund#Payment"/>
        <actions>
            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            <if condition="payment == null"><return message="Payment ${paymentId} not found"/></if>
            <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            <if condition="paymentMethod?.paymentMethodTypeEnumId != 'PmtCreditCard'">
                <return error="true" message="Cannot refund payment ${paymentId}, not a Credit Card payment."/></if>

            <!-- if no gatewayCimId, store the PaymentMethod on CIM -->
            <if condition="!paymentMethod.gatewayCimId">
                <service-call name="AuthorizeDotNet.CimServices.store#CustomerPaymentMethod"
                        in-map="[paymentMethodId:paymentMethod.paymentMethodId, paymentId:paymentId, paymentGatewayConfigId:paymentGatewayConfigId]"/>
                <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            </if>
            <!-- get party after CIM check so that gatewayCimId will be populated -->
            <set field="party" from="paymentMethod.'Owner#mantle.party.Party'"/>
            <if condition="!party.gatewayCimId">
                <return type="danger" message="Party ${party.partyId} has no gateway CIM ID, not refunding payment"/></if>
            <if condition="!paymentMethod.gatewayCimId">
                <return type="danger" message="Payment Method ${paymentMethod.paymentMethodId} has no gateway CIM ID, not refunding payment"/></if>

            <entity-find-one entity-name="AuthorizeDotNet.PaymentGatewayAuthorizeNet" value-field="pgan"/>
            <if condition="pgan == null"><log level="error" message="No PaymentGatewayAuthorizeNet found with ID ${paymentGatewayConfigId}"/><return/></if>

            <service-call name="mantle.account.PaymentServices.get#AuthorizePaymentGatewayResponse" in-map="context" out-map="context"/>
            <if condition="!paymentGatewayResponse"><return error="true" message="Could not find successful authorization for Payment ${paymentId}"/></if>

            <script><![CDATA[requestString = """<?xml version="1.0" encoding="utf-8"?>
<createCustomerProfileTransactionRequest xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd">
    <merchantAuthentication><name>${pgan.login}</name><transactionKey>${pgan.tranKey}</transactionKey></merchantAuthentication>
    <transaction><profileTransRefund>
        <amount>${toPlainString(amount ?: payment.amount)}</amount>
        <customerProfileId>${party.gatewayCimId}</customerProfileId>
        <customerPaymentProfileId>${paymentMethod.gatewayCimId}</customerPaymentProfileId>
        <order><invoiceNumber>${payment.orderId}</invoiceNumber></order>
        <transId>${paymentGatewayResponse.referenceNum}</transId>
    </profileTransRefund></transaction>
    <extraOptions>x_currency_code=${payment.amountUomId}</extraOptions>
</createCustomerProfileTransactionRequest>
            """]]></script>

            <set field="paymentOperationEnumId" value="PgoRefund"/>
            <set field="transactionUrl" from="pgan.transactionUrl"/>
            <service-call name="AuthorizeDotNet.CimPaymentServices.send#CimRequest" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="get" noun="PaymentGatewayDetails">
        <implements service="mantle.account.PaymentServices.get#PaymentGatewayDetails"/>
        <out-parameters>
            <parameter name="transactionStatus"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            <if condition="payment == null"><return message="Payment ${paymentId} not found"/></if>
            <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>
            <if condition="paymentMethod?.paymentMethodTypeEnumId != 'PmtCreditCard'">
                <return message="Cannot get transaction details for payment ${paymentId}, not a Credit Card payment."/></if>

            <entity-find-one entity-name="AuthorizeDotNet.PaymentGatewayAuthorizeNet" value-field="pgan"/>
            <if condition="pgan == null"><log level="error" message="No PaymentGatewayAuthorizeNet found with ID ${paymentGatewayConfigId}"/><return/></if>

            <set field="referenceNum" from="payment.paymentRefNum"/>
            <if condition="!referenceNum">
                <service-call name="mantle.account.PaymentServices.get#AuthorizePaymentGatewayResponse" in-map="context" out-map="context"/>
                <set field="referenceNum" from="paymentGatewayResponse?.referenceNum"/>
            </if>
            <if condition="!referenceNum"><return message="Could not find transaction ID (reference number) for Payment ${paymentId}"/></if>

            <script><![CDATA[requestString = """<?xml version="1.0" encoding="utf-8"?>
<getTransactionDetailsRequest xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd">
      <merchantAuthentication><name>${pgan.login}</name><transactionKey>${pgan.tranKey}</transactionKey></merchantAuthentication>
      <transId>${referenceNum}</transId>
</getTransactionDetailsRequest>
            """]]></script>

            <set field="paymentOperationEnumId" value="PgoTxDetails"/>
            <set field="transactionUrl" from="pgan.transactionUrl"/>
            <service-call name="AuthorizeDotNet.CimPaymentServices.send#CimRequest" in-map="context + [saveResponse:false]" out-map="context"/>
            <set field="transactionNode" from="responseNode?.transaction?.getAt(0)"/>

            <!-- Authorize.NET transactionStatus values and corresponding Payment statusId to determine needed action:
            authorizedPendingCapture   PmntAuthorized
            capturedPendingSettlement  PmntDelivered
            communicationError
            refundSettledSuccessfully  PmntConfirmed (original Payment confirmed, will be separate Payment for refund)
            refundPendingSettlement    PmntConfirmed (original Payment confirmed, will be separate Payment for refund)
            approvedReview
            declined                   PmntDeclined
            couldNotVoid
            expired                    PmntPromised
            generalError
            failedReview
            settledSuccessfully        PmntConfirmed
            settlementError
            underReview
            voided                     PmntVoid
            FDSPendingReview
            FDSAuthorizedPendingReview
            returnedItem
            -->
            <set field="transactionStatus" from="transactionNode?.transactionStatus?.getAt(0)?.text()"/>
            <if condition="transactionStatus">
                <set field="authNetStatusMap" from="[authorizedPendingCapture:'PmntAuthorized',
                        refundSettledSuccessfully:'PmntConfirmed', refundPendingSettlement:'PmntConfirmed',
                        capturedPendingSettlement:'PmntDelivered', settledSuccessfully:'PmntConfirmed',
                        declined:'PmntDeclined', expired:'PmntPromised', failedReview:'PmntPromised', voided:'PmntVoid']"/>
                <set field="gatewayStatusId" from="authNetStatusMap.get(transactionStatus)"/>
            </if>

            <set field="referenceNum" from="transactionNode?.transId?.getAt(0)?.text()"/>
            <!-- no real use for this, for auth then capture is auth date and not the best effectiveDate: <set field="submitTimeUTC" from="transactionNode?.submitTimeUTC?.getAt(0)?.text()"/> -->
            <set field="settlementTimeUTC" from="transactionNode?.batch?.getAt(0)?.settlementTimeUTC?.getAt(0)?.text()"/>
            <set field="settlementDate" from="ec.l10n.parseTimestamp(settlementTimeUTC, 'yyyy-MM-dd\'T\'HH:mm:ss.SSSZ', null, TimeZone.getTimeZone('GMT'))"/>

            <!-- <log level="warn" message="referenceNum ${referenceNum} transactionStatus ${transactionStatus} settlementTimeUTC ${settlementTimeUTC} settlementDate ${settlementDate}"/> -->

            <if condition="!gatewayStatusId || gatewayStatusId != payment.statusId">
                <!-- save PaymentGatewayResponse including transaction status -->
                <if condition="responseNode.messages">
                    <set field="responseCode" from="responseNode.messages[0].resultCode[0]?.text()"/>
                    <if condition="responseNode.messages[0].message">
                        <set field="message" from="responseNode.messages[0].message[0]"/>
                        <set field="reasonCode" from="message.code[0]?.text()"/>
                        <set field="reasonMessage" from="message.text[0]?.text()"/>
                    </if>
                </if>
                <if condition="reasonMessage != null &amp;&amp; reasonMessage.length() > 255"><set field="reasonMessage" from="reasonMessage.substring(0, 255)"/></if>
                <service-call name="create#mantle.account.method.PaymentGatewayResponse" out-map="context"
                        in-map="[paymentGatewayConfigId:paymentGatewayConfigId, paymentOperationEnumId:paymentOperationEnumId,
                            paymentId:payment.paymentId, paymentMethodId:payment.paymentMethodId, referenceNum:referenceNum,
                            amount:payment.amount, amountUomId:payment.amountUomId, transactionDate:ec.user.nowTimestamp,
                            responseCode:responseCode, reasonCode:reasonCode, reasonMessage:reasonMessage,
                            resultError:(responseCode == 'Ok' ? 'N' : 'Y'), resultDeclined:(transactionStatus == 'declined' ? 'Y' : 'N'),
                            transactionStatus:transactionStatus]"/>
            </if>
        </actions>
    </service>

    <service verb="send" noun="CimRequest">
        <in-parameters>
            <parameter name="transactionUrl" required="true"/>
            <parameter name="requestString" required="true" allow-html="any"/>
            <parameter name="paymentOperationEnumId" required="true"/>
            <parameter name="payment" type="EntityValue" required="true"/>
            <parameter name="paymentGatewayConfigId" required="true"/>
            <parameter name="pgan" type="Map"/>
            <parameter name="saveResponse" type="Boolean" default="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentGatewayResponseId"/>
            <parameter name="responseNode" type="groovy.util.Node"/>
        </out-parameters>
        <actions>
            <!-- NOTE: ALWAYS REMOVE THIS BEFORE COMMIT! may contain sensitive information: -->
            <!-- NOTE2: for CIM only sensitive information is merchant autht name and transactionKey, logging for now for issue research -->
            <!-- also mask cardCode field <cardCode>1111</cardCode> -->
            <set field="logReqString" from="pgan ? requestString?.replace(pgan.login, 'XXXX')?.replace(pgan.tranKey, 'XXXX') : requestString"/>
            <if condition="logReqString.contains('cardCode')"><set field="logReqString" from="logReqString.replaceFirst('cardCode&gt;\\d*&lt;', 'cardCode&gt;XXXX&lt;')"/></if>
            <log message="CimPaymentServices payment ${payment?.paymentId} ${paymentOperationEnumId} requestString: \n${logReqString}"/>
            <!-- do the HTTP request -->
            <set field="responseString" from="org.moqui.util.WebUtilities.simpleHttpStringRequest(transactionUrl, requestString, 'text/xml')"/>
            <log message="CimPaymentServices payment ${payment?.paymentId} ${paymentOperationEnumId} responseString: \n${responseString}"/>
            <set field="responseNode" from="new XmlParser().parseText(responseString)"/>

            <if condition="responseNode.messages">
                <set field="responseCode" from="responseNode.messages[0].resultCode[0]?.text()"/>
                <if condition="responseNode.messages[0].message">
                    <set field="message" from="responseNode.messages[0].message[0]"/>
                    <set field="reasonCode" from="message.code[0]?.text()"/>
                    <set field="reasonMessage" from="message.text[0]?.text()"/>
                </if>
            </if>
            <if condition="reasonMessage"><message>${reasonMessage}</message></if>

            <if condition="saveResponse">
                <if condition="responseNode.directResponse"><then>
                    <service-call name="AuthorizeDotNet.AimPaymentServices.save#AimResponse" out-map="context"
                            in-map="[paymentId:payment.paymentId, paymentOperationEnumId:paymentOperationEnumId,
                            paymentGatewayConfigId:paymentGatewayConfigId,
                            responseString:responseNode.directResponse[0].text(), delimeter:',']"/>
                </then><else>
                    <log level="warn" message="No directResponse in gateway request for payment ${payment.paymentId}, responseString: \n${responseString}"/>
                    <if condition="reasonMessage != null &amp;&amp; reasonMessage.length() > 255"><set field="reasonMessage" from="reasonMessage.substring(0, 255)"/></if>
                    <service-call name="create#mantle.account.method.PaymentGatewayResponse" out-map="context"
                            in-map="[paymentGatewayConfigId:paymentGatewayConfigId, paymentOperationEnumId:paymentOperationEnumId,
                                paymentId:payment.paymentId, paymentMethodId:payment.paymentMethodId,
                                amount:payment.amount, amountUomId:payment.amountUomId, transactionDate:ec.user.nowTimestamp,
                                responseCode:responseCode, reasonCode:reasonCode, reasonMessage:reasonMessage,
                                resultSuccess:'N', resultDeclined:'N', resultError:'Y', resultBadExpire:'N', resultBadCardNumber:'N']"/>
                </else></if>
            </if>
        </actions>
    </service>
</services>
